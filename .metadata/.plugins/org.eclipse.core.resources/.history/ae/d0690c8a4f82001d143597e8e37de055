package spring.back.apirest.auth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;

//130

@Configuration
@EnableAuthorizationServer
public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter{

	@Override
	public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {
		// SE CONFIGURAN LOS PERMISOS DE LAS RUTAS DE LA APP
		security.tokenKeyAccess("permitAll()")
			.checkTokenAccess("isAuthenticated()");						//se da permiso al endpoint q se encarga de validar el token. valida el token q se está enviando.
	}

	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
									               
		clients.inMemory()
			.withClient("angularapp")  									// app 
			.secret(passwordEncoder.encode("12345"))  					// contraseña
			.scopes("read","write")										// permisos
			.authorizedGrantTypes("password","refresh_token")			// manera de como se obtiene el token. // Permite obtener un token de acceso renovado, antes de q caduque el tiempo de sesión.
			.accessTokenValiditySeconds(3600)							// tiempo q dura el token.
			.refreshTokenValiditySeconds(3600);							// cada cuanto se valida el token.
	}

	@Override
	public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
		// TODO Auto-generated method stub
		endpoints.authenticationManager(authenticationManager)
		.tokenStore(tokenStore())
		.accessTokenConverter(accessTokenConverter());	
	}

	@Bean
	public JwtTokenStore tokenStore() {
		// TODO Auto-generated method stub
		return new JwtTokenStore(accessTokenConverter());
	}

	@Bean
	public JwtAccessTokenConverter accessTokenConverter() {
		// TODO Auto-generated method stub
		JwtAccessTokenConverter jwtAccessTokenConverter = new JwtAccessTokenConverter();
		jwtAccessTokenConverter.setSigningKey(JwtConfig.RSA_PRIVADA);			//CON LA PRIVADA SE FIRMA EL TOKEN.
		jwtAccessTokenConverter.setVerifierKey(JwtConfig.RSA_PUBLICA);			//CON LA PÚBLICA SE VALIDA Q EL TOKEN SEA AUTENTICO.
		return jwtAccessTokenConverter;
	}

	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
	
	//PARA EL PROCESO DE LOGIN
	@Autowired
	@Qualifier("authenticationManager")
	private AuthenticationManager authenticationManager;
	
}
